@Autowired
	private TaskRepository taskRepository;
	
	@Autowired
	private ScheduledTaskRepository scheduledTaskRepository;

	@Scheduled(fixedRate = 10000)
	public void watchDog() {
		ArrayList<Task> expiredTasks = taskRepository.findByExpirationDateLessThanAndExpiredFalseAndExpiresTrueAndCompletedFalse(new Date());
		for(Task expiredTask : expiredTasks){
			expiredTask.setExpired(true);
			taskRepository.save(expiredTask);
			logger.info("Expired task: " + expiredTask.getId());
		}
	}
	
	@Scheduled(cron="0 0 5 * * MON-FRI")
	public void weekDayTaskCreator(){
		ArrayList<ScheduledTask> scheduledTasks = new ArrayList<>(scheduledTaskRepository.findAll());
		for(ScheduledTask sTask : scheduledTasks) {
			Task t = new Task();
			t.setTitle(sTask.getTitle());
			t.setOwner(sTask.getOwner());
			t.setDescriptionRequired(true);
			t.setDescription(sTask.getDescription());
			t.setDueDate(new Date(new Date().getTime()+sTask.getDueTime()));
			t.setCompleted(false);
			t.setCreationDate(new Date());
			t.setExpires(true);
			t.setExpired(false);
			t.setExpirationDate(new Date(new Date().getTime()+sTask.getExpirationTime()));
			
			taskRepository.insert(t);
		}
	}


		
//		ScheduledTask st = new ScheduledTask();
//		st.setOwner("seiferson");
//		st.setTitle("AutoGeneratedTask");
//		st.setDescription("Please complete by EOD, this task was created using the scheduler and will expire in 12 hours");
//		st.setExpirationTime(12L*60L*60L*1000L);
//		st.setDueTime(9L*60L*60L*1000L);
//		
//		scheduledTaskRep.insert(st);
//		HashMap<String, String> map = new HashMap<>();
//		HashMap<String, Integer> keys = new HashMap<>();
//		int[] arr = {-1, 0, 1, 2, -1, -4};
//		int n = arr.length;
//		int[][] sumas = new int[arr.length][arr.length];
//		int[][] llaves = new int[(((n*(n-1)))/2)][2];
//		int cur = 0;
//		
//		int hits = 0;
//		
//		for(int i=0; i < arr.length; i++) {
//			for(int j=i+1; j < arr.length; j++) {
//				keys.put((i+"+"+j), arr[i]+arr[j]);
//				sumas[i][j] =  arr[i]+arr[j];
//				llaves[cur][0] = i;
//				llaves[cur++][1] = j;
//				hits++;
//			}
//		}
//		
//		System.out.println(keys.size());
//		System.out.println(cur-1);
//		
//		Iterator it = keys.entrySet().iterator();
//		for(int i=0; i < arr.length; i++) {
//			for(int j=0;j<cur;j++) {
//				int[] sol = new int[3];
//				sol[0] = arr[llaves[j][0]];
//				sol[1] = arr[llaves[j][1]];
//				sol[2] = arr[i];
//				
//				if(llaves[j][0]!=i && llaves[j][1]!=i && sumas[llaves[j][0]][llaves[j][1]] +arr[i] == 0) {
//					Arrays.sort(sol);
//					if(!map.containsKey(Arrays.toString(sol))) {
//						System.out.println(Arrays.toString(sol));
//						map.put(Arrays.toString(sol), Arrays.toString(sol));
//					}
//				}
//				hits++;
//			}
////			while(it.hasNext()) {
//				Map.Entry pair = (Map.Entry)it.next();
//				int x = Integer.parseInt((((String)pair.getKey()).split("\\+"))[0]);
//				int y = Integer.parseInt((((String)pair.getKey()).split("\\+"))[1]);
//				int[] sol = new int[3];
//				sol[0] = arr[x];
//				sol[1] = arr[y];
//				sol[2] = arr[i];
//				
//				if(x!=i && y!=i && ((Integer)pair.getValue())+arr[i] == 0) {
//					Arrays.sort(sol);
//					if(!map.containsKey(Arrays.toString(sol))) {
//						System.out.println(Arrays.toString(sol));
//						map.put(Arrays.toString(sol), Arrays.toString(sol));
//					}
//				}
//				hits++;
//			}
//		}
		
//		System.out.println(hits);
		
//		int[][] map = new int[80][80];
//		
//		//0 will identify water
// 		for(int i = 0; i < 80; i++) {
//			for(int j = 0; j < 80; j++) {
//				map[i][j] = 0;
//			}
//		}
// 		
// 		Random r = new Random();
// 		ArrayList<Location> land = new ArrayList<Location>();
// 		
// 		
// 		for(int i = 0; i< 50; i++) {
// 			int inix = r.nextInt(60)+10;
// 	 		int iniy = r.nextInt(60)+10;
// 			map[inix][iniy] = 1;
// 			
// 			Location l = new Location();
// 	 		l.x = inix;
// 	 		l.y = iniy;
// 	 		land.add(l);
// 	 		
// 		}
// 		for(Location l:land) {
// 			checkLand(map, getNext(l));
// 		}
// 		
// 		for(int i = 0; i < 3000; i++) {
// 			boolean changeinc = true;
// 			while(changeinc) {
// 				//Get a random piece of land from array
// 				Location xm = land.get(r.nextInt(land.size()));
// 				
// 				ArrayList<Location> sur = getNextCross(xm);
// 				
// 				for(Location xmm : sur) {
// 					if(map[xmm.x][xmm.y] == 2) {
// 						map[xmm.x][xmm.y] = 1;
// 						checkLand(map, getNext(xmm));
// 						land.add(xmm);
// 						changeinc = false;
// 						break;
// 					}
// 				}	
// 			}
// 		}
 		//printMap(map);
 		
 		
 		
		
		
//		ArrayList<Equipment> eq = new ArrayList<>();
//		
//		Equipment a = equipRep.findOne("5ac3da6243bfa53ef83f103b");
//		eq.add(a);
//		
//		Space s = spaceRep.findOne("5ac3da6243bfa53ef83f1037");
//		
//		Player p = new Player();
//		p.setName("Test warrior");
//		p.setDexterity(1);
//		p.setAgility(1);
//		p.setLuck(1);
//		p.setMagic(1);
//		p.setStrength(1);
//		p.setVitality(1);
//		
//		p.setEquipment(eq);
//		
//		p.setLevel(1);
//		p.setExperience(0);
//		p.setGoldCoins(0);
//		
//		p.setMainElement(Element.NEUTRAL);
//		p.setSubElement(Element.NATURE);
//		
//		p.setX(0);
//		p.setY(0);
//		p.setZ(0);
//		p.setSpace(s);
//		
//		p.setCurrentHitPoints(StatsEngine.calculateMaxHitPoints(p));
//		p.setCurrentSkillPoints(StatsEngine.calculateMaxSkillPoints(p));
//		
//		pRep.insert(p);
		
		
		/**Space s = new Space();
		
		s.setName("field_1_map_1");
		s.setLimitx(300);
		s.setLimity(300);
		
		spaceRep.insert(s);
		
		Equipment a = new Equipment();
		a.setName("leather_boots");
		a.setType(EquipmentType.SHOES);
		a.setWeight(1.2);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("light_armor");
		a.setType(EquipmentType.ARMOR);
		a.setWeight(6);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("leather_gloves");
		a.setType(EquipmentType.GLOVES);
		a.setWeight(0.3);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("fabric_cloak");
		a.setType(EquipmentType.GARMENT);
		a.setWeight(0.4);
		a.setBonus(1);
		equipRep.insert(a);
		
		
		a = new Equipment();
		a.setName("silver_ring");
		a.setType(EquipmentType.RING);
		a.setWeight(0.01);
		a.setBonus(0);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("silver_necklace");
		a.setType(EquipmentType.NECKLACE);
		a.setWeight(0.03);
		a.setBonus(0);
		equipRep.insert(a);
		
		/**
		repository.deleteAll();
		taskRepository.deleteAll();
		
		ArrayList<String> authorities = new ArrayList<String>();
		authorities.add("USER");
		Account account = new Account();
		account.setNickname("seiferson");
		account.setEmail("seifer.ch@gmail.com");
		account.setEnabled(true);
		account.setPassword("testpasswd");
		account.setAuthorities(authorities);
		
		repository.insert(account);
		
		
		Task t = new Task();
		t.setActive(true);
		t.setCompleted(false);
		t.setCompletionDate(null);
		t.setCreationDate(null);
		t.setCreationDate(new Date());
		t.setDescription("Take care of the dirty dishes, is not good for health to keep them with food more than one day, also it stinks.");
		t.setDescriptionRequired(true);
		t.setDueDate(new Date(new Date().getTime() + 3*24*60*60*1000) );
		t.setExpirationDate(null);
		t.setExpires(false);
		t.setOwner("seiferson");
		t.setTitle("Wash the dishes");
		
		taskRepository.insert(t);
		**/


public  class Location{
		public int x;
		public int y;
	}
	
	
	public ArrayList<Location> getNext(Location l){
		
	
		
		
		
		ArrayList<Location> ll = new ArrayList<>();
		
		Location n = new Location();
		if( l.x - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y - 1 >= 0 ) {
			n.x = l.x;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y + 1 < 80 ) {
			n.x = l.x;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x - 1 >= 0 && l.y - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		
		n = new Location();
		if( l.x - 1 >= 0 && l.y + 1 < 80 ) {
			n.x = l.x - 1;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80  && l.y - 1 >= 0) {
			n.x = l.x + 1;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 && l.y + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		return ll;
	}
	
	public ArrayList<Location> getNextCross(Location l){
		ArrayList<Location> ll = new ArrayList<>();
		
		Location n = new Location();
		if( l.x - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y - 1 >= 0 ) {
			n.x = l.x;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y + 1 < 80 ) {
			n.x = l.x;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		return ll;
	}
	
	public void printMap( int[][] map ) {
		for(int i  = 0; i < 80; i++) {
			System.out.println();
			for(int j = 0 ; j < 80; j++) {
				if(map[i][j] == 0)
				System.out.print(". ");
				else if(map[i][j] == 1) 
				System.out.print("# ");
				else
				System.out.print("~ ");
			}
		}
	}
	
	public void checkLand(int[][] map, ArrayList<Location> pos) {
		for(Location l : pos) {
			if(map[l.x][l.y]==0) {
				map[l.x][l.y] = 2;
			}
		}
	}



success: function(response) {
			$("#tasktitle").text(response.title);
			var cdate = new Date(response.creationDate);
			$("#taskcreationdate").text("Created " + (cdate.getMonth()+1).pad(2) + "/"+(cdate.getDate()).pad(2)+"/"+cdate.getFullYear() + " " + (cdate.getHours()).pad(2) + ":"+(cdate.getMinutes()).pad(2))
			if(response.descriptionRequired){
				var descontent = $("<p></p>");
				descontent.text(response.description);
				$("#taskdescription").empty();
				$("#taskdescription").append(descontent);
			}else{
				$("#taskdescription").empty();
			}
			$("#tasktags").empty();
			var ddate = new Date(response.dueDate);
			var tag = $("<div></div>");
			if(ddate.getTime() - (new Date()).getTime() > 18000000){
				tag.addClass("ui teal tiny label");
			} else if (ddate.getTime() - (new Date()).getTime() > 7200000){
				tag.addClass("ui yellow tiny label");
			} else {
				tag.addClass("ui red tiny label");
			}
			tag.text("DD " + (ddate.getMonth()+1).pad(2) + "/"+(ddate.getDate()).pad(2)+"/"+ddate.getFullYear() + " " + (ddate.getHours()).pad(2) + ":"+(ddate.getMinutes()).pad(2));
			$("#tasktags").append(tag);
			console.log(response);
			if(response.expires){
				var edate = new Date(response.dueDate);
				var taged = $("<div></div>");
				taged.addClass("ui tiny label");
				taged.text("ED " + (edate.getMonth()+1).pad(2) + "/"+(edate.getDate()).pad(2)+"/"+edate.getFullYear() + " " + (edate.getHours()).pad(2) + ":"+(edate.getMinutes()).pad(2));
				$("#tasktags").append(taged);
			}
			
			$("#taskdetmod").modal("show");
		},
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			console.log(textStatus);
			console.log(XMLHttpRequest);
		}


					var row = $("<div></div>");
					var column = $("<div></div>");
					var checkboxContainer = $("<div></div>");
					var checkbox = $("<input type='checkbox' name='" + entry.id + "tsk'/>");
					var checkboxLabel = $("<label></label>");
					var ddLabel = $("<div></div>");
					var ddate = new Date(entry.dueDate);
					var deleteButton = $("<button></button>");
					var editButton = $("<button></button>");
					var editIcon = $("<i></i>");
					var deleteIcon = $("<i></i>");
					
					if(firstElem){
						firstElem = false;
						column.addClass("column tlistfcol");
						row.addClass("one column row tlistfelem unselectablef");
					} else {
						row.addClass("one column row tlistelem");
						column.addClass("column tlistcol unselectablef");
					}
					
					checkboxContainer.addClass("ui checkbox");
					checkboxLabel.text(entry.title);
					checkboxLabel.click(function(){showTaskModal(entry.identifier)});
					ddLabel.addClass("ui basic label floatfright");
					ddLabel.addClass(getLabelColor(ddate));
					ddLabel.text("DD " + dateToStringCompact(ddate));
					column.bind('touchstart',function(){catchTaskHold(entry.identifier)});
					column.bind('touchend',function(){catchTaskRelease(entry.identifier)});
					column.attr("id", "col" + entry.identifier);
					deleteButton.addClass("ui mini icon basic button floatfright transition hidden");
					editButton.addClass("ui mini icon basic button floatfright transition hidden");
					editIcon.addClass("pencil icon");
					deleteIcon.addClass("trash icon");
					
					checkbox.change(function() {
						if (this.checked) {
							var datax = {
								completed : true
							};
							$.ajax({
								type: 'PATCH',
								url: "/api/tasks/"+entry.identifier,
								data: JSON.stringify(datax),
								headers: {
									"Authorization" : "Bearer " + $.cookie("authtoken"),
									"Accept" : "application/json"
								},
								contentType: "application/json; charset=utf-8",
								success: function(response) {
									console.log("updated");
								},
								error: function(XMLHttpRequest, textStatus, errorThrown) {
									console.log(textStatus);
									console.log(XMLHttpRequest);
								}
							});



						} else {
							console.log("oposite");
						}
					});
					
					$("#taskslist").append(row);
					row.append(column);
					column.append(checkboxContainer);
					checkboxContainer.append(checkbox);
					checkboxContainer.append(checkboxLabel);
					column.append(ddLabel);
					editButton.append(editIcon);
					deleteButton.append(deleteIcon);
					column.append(editButton);
					column.append(deleteButton);


 <canvas id="map" width="330" height="100"></canvas>
      <div class="ui one column grid">
        <div class="column">
        <div class="ui three tiny statistics">
          <div class="teal statistic">
            <div class="value">5</div>
            <div class="label">Completed</div>
          </div>
          <div class="yellow statistic">
            <div class="value">22</div>
            <div class="label">Due</div>
          </div>
          <div class="red statistic">
            <div class="value">10</div>
            <div class="label">Expiring</div>
          </div>
        </div>
        </div>
        <div class="column">
          <h4 class="ui top attached header hiddenf" id="tasksheader">Tasks</h4>
          <div class="ui attached segment hiddenf" id="taskssegment">
          	<div class="ui vertically divided grid" id="taskslist">
          	</div>
          </div>
          <div class="ui clearing bottom attached segment hiddenf" id="taskfooter">
            <button class='ui mini icon button right floated' onclick='showNewTaskModal()'><i class='plus icon'></i>Add a task</button>
          </div>
        </div>
        <div class="column">
          <div class="ui icon info message hidden" id="messagenoauthy">
            <i class="sticky note outline icon"></i>
            <div class="content">
              <div class="header">Welcome to wissen</div>
              <p>A spring boot application with no sense.</p>
              <p>This is just a silly message not to present an empty screen to the newcomers.</p>
            </div>
          </div>
        </div>
        <div class="column">
          <div class="ui icon warning message hidden" id="messagenoauthx">
            <i class="warning sign icon"></i>
            <div class="content">
              <div class="header">This site is still under development!</div>
              <p>Everything related to the system and its development can be tracked on the <a href="https://github.com/seiferxx/wissen/">github page</a>.</p>
            </div>
          </div>
        </div>
      </div>
      
      
      
      
      <div class="ui modal" id="newtaskmod">
      <i class="close icon"></i>
      <div class="header">New Task</div>
      <div class="scrolling content">
        <form class="ui form">
          <div class="field">
            <label>Title</label>
            <input type="text" name="tasktitlef" id="tasktitlef" placeholder="Some task name" maxlength="24"/>
          </div>
          <div class="field">
            <div class="ui checkbox">
              <input type="checkbox" name="taskdescneededf" id="taskdescneededf" onchange="toggleNewTaskDesc()" checked="true" />
              <label>Description needed?</label>
            </div>
          </div>
          <div class="field" id="taskdescfieldf">
            <label>Description</label>
            <textarea rows="3" name="taskdescf" id="taskdescf"></textarea>
          </div>
          <div class="field">
            <label>Due date</label>
            <input type="datetime-local" name="taskduedatef" id="taskduedatef" />
          </div>
          <div class="field">
            <div class="ui checkbox">
              <input type="checkbox" name="taskexpiresf" id="taskexpiresf" onchange="toggleExpireDate()" checked="true"/>
              <label>Expires?</label>
            </div>
          </div>
          <div class="field" id="taskexpirationdatefieldf">
            <label>Expiration date</label>
            <input type="datetime-local" name="taskexpirationdatef" id="taskexpirationdatef" />
          </div>
          <div class="right aligned">
            <button class="ui button" type="button" onclick="createTask()">Create task</button>
          </div>
        </form>
      </div>
    </div>
    
    <div class="ui basic modal" id="taskdetmod">
      <div class="content">
        <div class="ui one cards">
        <div class="card">
          <div class="content">
            <div class="header"><span id="tasktitle"></span></div>
              <div class="meta">
                <span id="taskcreationdate"></span>
              </div>
              <div class="description" id="taskdescription">
              </div>
            </div>
            <div class="extra content" id="tasktags">
            </div>
          </div>
        </div>
      </div>
    </div>







public void takeDamage(Damage damage){
		int finalDamage = damage.getAmount();
		
		if(Dice.rollDice(20) == Dice.rollDice(20)){
			finalDamage = (int) Math.round(damage.getCriticalRate() * damage.getAmount());
			System.out.println("Crit");
		}
		
		if(currentHitPoints - finalDamage < 0){
			currentHitPoints = 0;
			System.out.println("GameOver");
		} else {
			currentHitPoints -= finalDamage;
		}
	}
	
	public Damage performBasicAttack(){
		int damageAmount = level * 5 + strength * 10 + ATK_BASE;
		return new Damage(DamageType.PHYSICAL, damageAmount, element, criticalRate);
	}
	
	public int getMaxHitPoints(){
		return (HP_BASE+level*20);
	}
	
	public int getCurrentHitPoints(){
		return this.currentHitPoints;
	}
	
	public int getCurrentSkillPoints(){
		return currentSkillPoints;
	}
	
	public String getName(){
		return name;
	}
	
	public String getId(){
		return id;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	public void setId(String id){
		this.id = id;
	}














<div class="one column row">
  <div class="column">
    <div class="ui checkbox">
      <input type="checkbox" name="task1" />
      <label>Wash</label>
    </div>
    <div class="ui basic label floatfright">DD 25h</div>
  </div>
</div>
          	  <div class="one column row" style="padding-bottom: 7px; padding-top: 7px;">
          	    <div class="column" style="margin-bottom:0px; margin-top:0px;">
          	      <div class="ui checkbox" style="float: left;" >
          	        <input type="checkbox" name="task1" />
                    <label>Wash</label>
                  </div>
                  <button class="ui mini icon button" style="float:right;"><i class="cloud icon"></i></button>
                  <button class="ui mini icon button" style="float:right;"><i class="cloud icon"></i></button>
          	    </div>
          	  </div>
          	  <div class='one column row'><div class='column'><button class='ui mini icon button floatfright'><i class='plus icon'></i>Add a task</button></div></div>







function irrigate(plantid) {
  if($.cookie("authtoken") === undefined) {
    $("#wrongcredentials").addClass("hidden");
    $("#user").val("");
    $("#passwd").val("");
    $("#authmod").modal("show");
  }
  else {
    var xdata = {
      date: (new Date()).getTime(),
      person : $.cookie("authuser"),
      plant : plantid
    };
    $.ajax({
      type: 'POST',
      url: "/api/irrigationRecords",
      contentType: "application/json; charset=utf-8",
      dataType: 'json',
      headers: {
        "Authorization" : "Bearer " + $.cookie("authtoken"),
      },
      data: JSON.stringify(xdata),
        success: function(resultData) {
        var cDate = new Date();
        $("#latest").removeClass("redstatus");
        $("#latest").addClass("greenstatus");
        $("#latest").text("0.00 hours ago");
      },
      error: function(XMLHttpRequest, textStatus, errorThrown) {
        console.log(textStatus);
        console.log(XMLHttpRequest.status);
      }
    });
  }
}

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	</head>
	<body>
		
		<!-- INDEX HEADER -->
		<div th:fragment="indexHeader">
		<h1 class="ui center aligned icon header">
			<i class="circular book icon"></i>
			<div class="content">
				Wissen
				<div class="sub header">Flashcards repository</div>
			</div>
		</h1>
		<div style="margin-top: 50px"></div>
		</div>
		
		
	</body>
</html>
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="/css/semantic.css" />
		<title>Wissen</title>
		<script src="http://cytoscape.github.io/cytoscape.js/api/cytoscape.js-latest/cytoscape.min.js"></script>
		<script src="https://cdn.rawgit.com/cytoscape/cytoscape.js-spread/1.0.9/cytoscape-spread.js"></script>
		<script src="https://cdn.rawgit.com/cytoscape/cytoscape.js-cose-bilkent/1.0.5/cytoscape-cose-bilkent.js"></script>
		<style>
			#cy {
		        position: absolute;
		        left: 0;
		        top: 0;
		        right: 0;
		        bottom: 0;
		        z-index: 999;
		      }
    	</style>
	</head>
	<body>
		<div id="cy"></div>
				
		<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
		<script src="/js/semantic.js"></script>
		<script>
			$('.ui.dropdown')
			  .dropdown()
			;

		</script>
		<script th:inline="javascript" type="text/javascript">
		/*<![CDATA[*/
			var concepts = [[${concepts}]];
			var map = [[${map}]];
			var relations = [[${relations}]];
			var elem = [];
			
			for( i= 0; i < concepts.length; i++ ){
				elem.push( { data: { id: map[concepts[i]] , label: concepts[i] }, classes: 'top-center' } );
			}
			for( i = 0; i < relations.length; i++ ){
				elem.push( { data: { id: relations[i].other.id , label: relations[i].other.text }, classes: 'top-center' } );
				elem.push( { data: { source: map[relations[i].subject.text], target: relations[i].other.id, label: relations[i].action.text }, classes: 'autorotate' } );
			}
			//{ data: { source: '${relations.subject.text}', target: 'ar-tgt', label: '${relations.action.text}' }, classes: 'autorotate' },
		
			document.addEventListener( 'DOMContentLoaded', function( ){
				var cy = window.cy = cytoscape({
					container: document.getElementById('cy'),
					boxSelectionEnabled: false,
					autounselectify: true,
					layout: {
						name: 'spread',
						minDist: 100,
						padding: 100
					},
					style: [{
						selector: 'node',
						style: {
							'height': 40,
							'width': 40,
							'background-color': '#ccc',
							'label': 'data(label)'
						}
					},{
						selector: 'edge',
						style: {
							'label': 'data(label)',
							'width': 3,
							'line-color': '#ccc'
						}
					},{
						selector: '.top-center',
						style: {
							'text-valign': 'center',
							'text-halign': 'center'
						}
					},{
						selector: '.autorotate',
						style: {
							'edge-text-rotation': 'autorotate'
						}
					}
				],
				elements: elem
		});
      });
	/*]]>*/
    </script>
	</body>
</html>

<!DOCTYPE html>
<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:th="http://www.thymeleaf.org"
	xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="/css/semantic.css" />
		<title>Login</title>
	</head>
	<body>
		<div style="margin-top: 80px;"></div>
		<div class="ui container">
			<div class="ui one column centered grid">
				<div class="eight wide column">
					<h2 class="ui center aligned icon header">
						<i class="circular book icon"></i>
						<div class="content">
							Wissen
						</div>
					</h2>
					<div class="ui inverted raised segment">
						<form th:action="@{/login}" method="post" class="ui inverted form" >
							<div class="field">
								<label>Username</label>
								<input type="text" name="username"/>
							</div>
							<div class="field">
								<label>Last Name</label>
								<input type="password" name="password" />
							</div>
							<button class="ui button" type="submit">Sign In</button>
						</form>
					</div>
				</div>
			</div>
		</div>
		
		<div class="ui basic segment center aligned">
			<b>Seifernet 2016</b>
		</div>
		
		<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
		<script src="/js/semantic.js"></script>
	</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="/css/semantic.css" />
		<title>Wissen</title>
	</head>
	<body>
		
		<div class="ui top menu">
			<div class="header item">Wissen</div>
			<div class="right menu">
				<div class="ui right aligned category search item">
					<div class="ui transparent icon input">
						<input class="prompt" type="text" placeholder="Search flashcards..." />
						<i class="search link icon"></i>
					</div>
					<div class="results"></div>
				</div>
			</div>
		</div>
		
		
		<h1 class="ui center aligned icon header">
			<i class="circular book icon"></i>
			<div class="content">
				Wissen
				<div class="sub header">Flashcards repository</div>
			</div>
		</h1>
		
		<div style="margin-top: 50px"></div>
		
		<div class="ui container">
			<div class="ui two column centered grid">
				<form class="ui form" action="/process" method="post">
					<div class="field">
						<input type="text" name="xurl" placeholder="URL" />
						<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>
					</div>
					<button class="ui button" type="submit">Start</button>
				</form>
			</div>
		</div>
		
		<div class="ui basic segment center aligned">
			<b>Seifernet 2016</b>
		</div>
		
		<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
		<script src="/js/semantic.js"></script>
		<script>
			$('.ui.dropdown')
			  .dropdown()
			;

		</script>
	</body>
</html>


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<th:block th:fragment="plant">
    <div class="ui container">
      <div class="ui one cards">
        <div class="ui green card">
          <div class="ui content">
            <h2 class="ui icon header">
              <i class="leaf icon greenicon"></i>
              <div class="content">Office plant<div class="sub header">Last time it was watered: <span id="latest"></span></div></div>
            </h2>
            <p class="center aligned">
              <button class="circular ui big blue icon button" onclick="irrigate('office')"><i class="icon theme"></i></button>
            </p>
          </div>
        </div>
      </div>
    </div>
    </th:block>
    
    <th:block th:fragment="task">
    <div class="ui container">
      <div class="ui one cards">
        <div class="card">
          <div class="ui top attached progress" id="taskcard">
            <div class="bar"></div>
          </div>
          <div class="content">
            <div class="header"><span id="tasktitle"></span></div>
              <div class="meta">
                <span id="taskcreationdate"></span>
              </div>
              <div class="description">
                <p id="taskdescription"></p>
                <div class="ui segment">
                  <div class="ui checkbox">
                    <input type="checkbox" name="example"/>
                    <label>Make my profile visible</label>
                  </div>
                  <div class="ui checkbox">
                    <input type="checkbox" name="example"/>
                    <label>Make my profile visible</label>
                  </div>
                  <div class="ui checkbox">
                    <input type="checkbox" name="example"/>
                    <label>Make my profile visible</label>
                  </div>
                  <div class="ui checkbox">
                    <input type="checkbox" name="example"/>
                    <label>Make my profile visible</label>
                  </div>
                </div>
              </div>
            </div>
            <div class="extra content">
            </div>
          </div>
        </div>
      </div>
    </th:block>





	
	<h4 class="ui top attached header">Tasks <div class="ui basic tiny teal label">A 24</div><div class="ui basic tiny red label">E 12</div><div class="ui basic tiny yellow label">NDD 3</div></h4>
      <div class="ui attached segment">
        <div class="ui relaxed divided list">
          <div class="item">
            <div class="middle aligned right floated content"><div class="ui tiny teal label">12/01/2018 23:50</div></div>
            <div class="middle aligned content"><i class="large square outline icon"></i> Morning checklist</div>
            <div class="ui blue bottom attached progress success" data-percent="85">
              <div class="bar"></div>
            </div>
          </div>
          <div class="item">
            <div class="middle aligned content"><i class="large checkmark box outline icon"></i> Clean the washroom</div>
          </div>
          <div class="item" onclick="$('#newtaskmod').modal('show');">
            <div class="middle aligned content"><i class="large plus square outline icon"></i> Add a task</div>
          </div>
          <div class="item">
            <div class="middle aligned content"><i class="large browser icon"></i> See all</div>
          </div>
        </div>
      </div>
	
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="/css/semantic.css" />
		<title>Wissen</title>
	</head>
	<body>
		
		<div class="ui top menu">
			<div class="header item">Wissen</div>
			<div class="right menu">
				<div class="ui right aligned category search item">
					<div class="ui transparent icon input">
						<input class="prompt" type="text" placeholder="Search flashcards..." />
						<i class="search link icon"></i>
					</div>
					<div class="results"></div>
				</div>
			</div>
		</div>
		
		
		<h1 class="ui center aligned icon header">
			<i class="circular book icon"></i>
			<div class="content">
				Wissen
				<div class="sub header">Flashcards repository</div>
			</div>
		</h1>
		
		<div style="margin-top: 50px"></div>
		
		<div class="ui container">
			<div class="ui breadcrumb">
				<a class="section" href="/indetify" >Identify</a>
			</div>
			<table class="ui celled striped table">
				<thead>
					<tr><th colspan="3">Relations</th></tr>
				</thead>
				<tbody>
					<th:block th:each="relation : ${relations}">
						<tr>
							<td class="collapsing" th:text="${relation.subject.text}"></td>
							<td th:text="${relation.action.text}"></td>
							<td th:text="${relation.other.text}"></td>
						</tr>
					</th:block>
				</tbody>
			</table>
		</div>
		
		<div class="ui basic segment center aligned">
			<b>Seifernet 2016</b>
		</div>
		
		<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
		<script src="/js/semantic.js"></script>
		<script>
			$('.ui.dropdown')
			  .dropdown()
			;

		</script>
	</body>
</html>





	<canvas id="myCanvas" width="640" height="480" style="border:3px solid #979797; margin-left: 200px; margin-top: 20px"></canvas>
	
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<script src="/js/canvasengine.js"></script>
	<script src="/js/canvasresources.js"></script>
	<script src="/js/canvasobjects.js"></script>
	<script>
	
	$('document').ready(function(){
		var canvas = document.getElementById('myCanvas');
		var ctx = canvas.getContext('2d');
		
		ctx.beginPath();
		ctx.rect(0, 0, 640, 480);
		ctx.fillStyle = "black";
		ctx.fill();
		
		loadResources();
		init(ctx);
		
		function gameLoop () {
			window.requestAnimationFrame(gameLoop);
			render(ctx);  
		}
		
		gameLoop();
		
	});
	